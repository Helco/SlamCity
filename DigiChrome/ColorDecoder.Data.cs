namespace DigiChrome;
using System;

partial class ColorDecoder
{
    private const int BlockSize = 8;
    private const int BlockSizeSqr = BlockSize * BlockSize;
    private const byte Category8x8 = 4;
    private const byte Category8x4 = 2;
    private const byte TypeCopyFull = 91;
    private const byte TypeCopyHalf = 92;

    // category 0 and 1 are treated identically
    private static readonly byte[] Categories =
    {
        0,   4,   0,   4,   4,   4,   4,   4,
        2,   1,   1,   1,   4,   4,   4,   4,
        2,   2,   1,   1,   1,   2,   1,   2,
        1,   1,   2,   2,   1,   2,   2,   2,
        2,   2,   2,   2,   2,   2,   2,   2,
        2,   2,   2,   2,   2,   2,   2,   2,
        1,   1,   1,   1,   1,   1,   1,   1,
        1,   1,   1,   1,   1,   1,   1,   1,
        4,   4,   4,   4,   4,   4,   4,   4,
        4,   4,   4,   4,   4,   4,   4,   4,
        4,   4,   4,   4,   4,   4,   4,   4,
        4,   4,   4,   4,   2,   1,   0,   0,
        0,   0,   0,   0,   0,   0,   0,   0,
        0,   0,   0,   0,   0,   0,   0,   0,
        0,   0,   0,   0,   0,   0,   0,   0,
        0,   0,   0,   0,   0,   0,   0,   0
    };

    // Depending on the block category this is an index to a fixed pattern or a color offset
    private static readonly byte[] Indices =
    {
        0,   0,   0,   1,   2,   3,   4,   5,
        0,   0,   1,   2,   6,   7,   8,   9,
        1,   2,   3,   4,   5,   3,   6,   4,
        7,   8,   5,   6,   9,   7,   8,   9,
       10,  11,  12,  13,  14,  15,  16,  17,
       18,  19,  20,  21,  22,  23,  24,  25,
       10,  11,  12,  13,  14,  15,  16,  17,
       18,  19,  20,  21,  22,  23,  24,  25,
        2,   3,   4,   5,   6,   7,   8,   9,
       10,  11,  12,  13,  14,  15,  16,  17,
       18,  19,  20,  21,  22,  23,  24,  25,
        1,   1,   1,   0,   0,   0,   0,   0,
        0,   1,   0,   1,   1,   1,   1,   1,
        1,   4,   4,   5,   1,   1,   1,   1,
        2,   3,   3,   4,   4,   5,   5,   4,
        3,   2,   5,   4,   1,   4,   4,   3
    };

    private static readonly byte[] ColorPairCount =
    {
        0,   1,   0,   1,   1,   1,   1,   1,
        1,   4,   4,   5,   1,   1,   1,   1,
        2,   3,   3,   4,   4,   5,   5,   4,
        3,   2,   5,   4,   1,   4,   4,   3,
        8,   7,   7,   6,   7,   6,   6,   5,
        7,   6,   6,   5,   6,   5,   5,   4,
        8,   7,   7,   6,   7,   6,   6,   5,
        7,   6,   6,   5,   6,   5,   5,   4,
        1,   1,   1,   1,   1,   1,   1,   1,
        1,   1,   1,   1,   1,   1,   1,   1,
        1,   1,   1,   1,   1,   1,   1,   1,
        1,   1,   1,   0,   0,   0,   0,   0
    };

    private static readonly ulong[] FixedPatterns =
    {
        0x55_AA_55_AA_55_AA_55_AA,
        0xFF_FF_55_AA_55_AA_00_00,
        0x5F_AF_57_AB_15_2A_05_0A,
        0x17_2B_17_2B_17_2B_17_2B,
        0x05_2A_55_2A_55_AB_57_AF,
        0x00_00_55_AA_55_AA_FF_FF,
        0x50_A0_54_A8_D5_EA_F5_FA,
        0xD4_E8_D4_E8_D4_E8_D4_E8,
        0xF5_EA_D5_AA_54_AA_54_A0,
        0x55_AA_55_AA_00_00_00_00,
        0x55_2A_15_0A_05_02_01_00,
        0x05_0A_05_0A_05_0A_05_0A,
        0x01_00_05_02_15_0A_55_2A,
        0x00_00_00_00_55_AA_55_AA,
        0x00_80_40_A0_50_A8_54_AA,
        0x50_A0_50_A0_50_A0_50_A0,
        0x54_AA_50_A8_40_A0_00_80,
        0xFF_FF_FF_FF_55_AA_55_AA,
        0x7F_FF_5F_BF_57_AF_55_AB,
        0x5F_AF_5F_AF_5F_AF_5F_AF,
        0x55_AB_57_AF_5F_BF_7F_FF,
        0x55_AA_55_AA_FF_FF_FF_FF,
        0xD5_AA_F5_EA_FD_FA_FF_FE,
        0xF5_FA_F5_FA_F5_FA_F5_FA,
        0xFF_FE_FD_FA_F5_EA_D5_AA,
    };

    private static ReadOnlySpan<byte> ColorOffset8x4(int index) => allColorOffsets8x4.AsSpan(index * 8, 8);
    private static readonly byte[] allColorOffsets8x4 =
    {
        0,   0,   0,   0,   0,   0,   0,   0,
        0,   0,   2,   2,   0,   0,   2,   2,
        0,   0,   2,   2,   0,   0,   4,   4,
        0,   2,   4,   4,   6,   8,   4,   4,
        0,   2,   4,   4,   6,   6,   4,   4,
        0,   0,   2,   4,   0,   0,   6,   8,
        0,   0,   2,   4,   0,   0,   6,   6,
        0,   0,   2,   2,   4,   6,   2,   2,
        0,   0,   2,   2,   0,   0,   4,   6,
        0,   0,   2,   2,   4,   4,   2,   2,
        0,   2,   4,   6,   8,  10,  12,  14,
        0,   2,   4,   6,   8,  10,  12,  12,
        0,   2,   4,   6,   8,   8,  10,  12,
        0,   2,   4,   6,   8,   8,  10,  10,
        0,   2,   4,   4,   6,   8,  10,  12,
        0,   2,   4,   4,   6,   8,  10,  10,
        0,   2,   4,   4,   6,   6,   8,  10,
        0,   2,   4,   4,   6,   6,   8,   8,
        0,   0,   2,   4,   6,   8,  10,  12,
        0,   0,   2,   4,   6,   8,  10,  10,
        0,   0,   2,   4,   6,   6,   8,  10,
        0,   0,   2,   4,   6,   6,   8,   8,
        0,   0,   2,   2,   4,   6,   8,  10,
        0,   0,   2,   2,   4,   6,   8,   8,
        0,   0,   2,   2,   4,   4,   6,   8,
        0,   0,   2,   2,   4,   4,   6,   6
    };

    private static ReadOnlySpan<byte> ColorOffset4x4(int index) => allColorOffsets4x4.AsSpan(index * 8, 8);
    private static readonly byte[] allColorOffsets4x4 =
    {
        0,   2,   4,   2,   6,   6,   6,   6,
        0,   2,   0,   4,   6,   6,   6,   6,
        0,   2,   4,   6,   8,   8,   8,   8,
        0,   2,   0,   2,   4,   4,   4,   4,
        0,   0,   0,   0,   2,   4,   6,   4,
        0,   0,   0,   0,   2,   4,   2,   6,
        0,   0,   0,   0,   2,   4,   6,   8,
        0,   0,   0,   0,   2,   4,   2,   4,
        0,   0,   0,   0,   2,   2,   2,   2,
        0,   0,   0,   0,   0,   0,   0,   0,
        0,   2,   4,   6,   8,  10,  12,  14,
        0,   2,   4,   6,   8,  10,  12,  10,
        0,   2,   4,   6,   8,  10,   8,  12,
        0,   2,   4,   6,   8,  10,   8,  10,
        0,   2,   4,   2,   6,   8,  10,  12,
        0,   2,   4,   2,   6,   8,  10,   8,
        0,   2,   4,   2,   6,   8,   6,  10,
        0,   2,   4,   2,   6,   8,   6,   8,
        0,   2,   0,   4,   6,   8,  10,  12,
        0,   2,   0,   4,   6,   8,  10,   8,
        0,   2,   0,   4,   6,   8,   6,  10,
        0,   2,   0,   4,   6,   8,   6,   8,
        0,   2,   0,   2,   4,   6,   8,  10,
        0,   2,   0,   2,   4,   6,   8,   6,
        0,   2,   0,   2,   4,   6,   4,   8,
        0,   2,   0,   2,   4,   6,   4,   6
    };
}
